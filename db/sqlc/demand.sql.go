// Code generated by sqlc. DO NOT EDIT.
// source: demand.sql

package db

import (
	"context"
	"database/sql"
)

const createDemand = `-- name: CreateDemand :one
INSERT INTO
    demands
    (title, description, url, price, isDone, account_id)
VALUES
    ($1, $2, $3, $4, $5, $6)
RETURNING id, title, description, url, price, isdone, account_id
`

type CreateDemandParams struct {
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
	Url         sql.NullString `json:"url"`
	Price       sql.NullString `json:"price"`
	Isdone      sql.NullString `json:"isdone"`
	AccountID   int64          `json:"account_id"`
}

func (q *Queries) CreateDemand(ctx context.Context, arg CreateDemandParams) (Demand, error) {
	row := q.db.QueryRowContext(ctx, createDemand,
		arg.Title,
		arg.Description,
		arg.Url,
		arg.Price,
		arg.Isdone,
		arg.AccountID,
	)
	var i Demand
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Url,
		&i.Price,
		&i.Isdone,
		&i.AccountID,
	)
	return i, err
}

const deleteDemand = `-- name: DeleteDemand :exec
DELETE FROM demands WHERE id = $1
`

func (q *Queries) DeleteDemand(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteDemand, id)
	return err
}

const getDemand = `-- name: GetDemand :one
SELECT id, title, description, url, price, isdone, account_id
FROM demands
WHERE title = $1
LIMIT 1
`

func (q *Queries) GetDemand(ctx context.Context, title string) (Demand, error) {
	row := q.db.QueryRowContext(ctx, getDemand, title)
	var i Demand
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Url,
		&i.Price,
		&i.Isdone,
		&i.AccountID,
	)
	return i, err
}

const listDemands = `-- name: ListDemands :many
SELECT id, title, description, url, price, isdone, account_id
FROM demands
ORDER BY title
LIMIT $1
OFFSET
$2
`

type ListDemandsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListDemands(ctx context.Context, arg ListDemandsParams) ([]Demand, error) {
	rows, err := q.db.QueryContext(ctx, listDemands, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Demand
	for rows.Next() {
		var i Demand
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Url,
			&i.Price,
			&i.Isdone,
			&i.AccountID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDemand = `-- name: UpdateDemand :one
UPDATE demands SET account_id = $2, description
= $3
WHERE id = $1
RETURNING id, title, description, url, price, isdone, account_id
`

type UpdateDemandParams struct {
	ID          int64          `json:"id"`
	AccountID   int64          `json:"account_id"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) UpdateDemand(ctx context.Context, arg UpdateDemandParams) (Demand, error) {
	row := q.db.QueryRowContext(ctx, updateDemand, arg.ID, arg.AccountID, arg.Description)
	var i Demand
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Url,
		&i.Price,
		&i.Isdone,
		&i.AccountID,
	)
	return i, err
}
