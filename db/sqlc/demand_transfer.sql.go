// Code generated by sqlc. DO NOT EDIT.
// source: demand_transfer.sql

package db

import (
	"context"
)

const createDemand_transfer = `-- name: CreateDemand_transfer :one
INSERT INTO demand_transfer (
  from_account_id,
  to_account_id,
  demand_id
) VALUES (
  $1, $2, $3
) RETURNING id, from_account_id, to_account_id, demand_id
`

type CreateDemand_transferParams struct {
	FromAccountID int64 `json:"from_account_id"`
	ToAccountID   int64 `json:"to_account_id"`
	DemandID      int64 `json:"demand_id"`
}

func (q *Queries) CreateDemand_transfer(ctx context.Context, arg CreateDemand_transferParams) (DemandTransfer, error) {
	row := q.db.QueryRowContext(ctx, createDemand_transfer, arg.FromAccountID, arg.ToAccountID, arg.DemandID)
	var i DemandTransfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.DemandID,
	)
	return i, err
}

const deleteDemand_transfer = `-- name: DeleteDemand_transfer :exec
DELETE FROM demand_transfer WHERE id = $1
`

func (q *Queries) DeleteDemand_transfer(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteDemand_transfer, id)
	return err
}

const getDemand_transfer = `-- name: GetDemand_transfer :one
SELECT id, from_account_id, to_account_id, demand_id FROM demand_transfer
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetDemand_transfer(ctx context.Context, id int64) (DemandTransfer, error) {
	row := q.db.QueryRowContext(ctx, getDemand_transfer, id)
	var i DemandTransfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.DemandID,
	)
	return i, err
}

const listDemand_transfer = `-- name: ListDemand_transfer :many
SELECT id, from_account_id, to_account_id, demand_id FROM demand_transfer
WHERE 
    from_account_id = $1 OR
    to_account_id = $2
ORDER BY id
LIMIT $3
OFFSET $4
`

type ListDemand_transferParams struct {
	FromAccountID int64 `json:"from_account_id"`
	ToAccountID   int64 `json:"to_account_id"`
	Limit         int32 `json:"limit"`
	Offset        int32 `json:"offset"`
}

func (q *Queries) ListDemand_transfer(ctx context.Context, arg ListDemand_transferParams) ([]DemandTransfer, error) {
	rows, err := q.db.QueryContext(ctx, listDemand_transfer,
		arg.FromAccountID,
		arg.ToAccountID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DemandTransfer
	for rows.Next() {
		var i DemandTransfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.DemandID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
